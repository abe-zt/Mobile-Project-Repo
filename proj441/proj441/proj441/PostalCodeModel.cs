// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using PostalCodesJSON;
//
//    var postal = Postal.FromJson(jsonString);

namespace PostalCodesJSON
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Postal
    {
        [JsonProperty("postalCodes")]
        public List<PostalCode> PostalCodes { get; set; }
    }

    public partial class PostalCode
    {
        [JsonProperty("adminCode2")]
        public string AdminCode2 { get; set; }

        [JsonProperty("adminCode1")]
        public string AdminCode1 { get; set; }

        [JsonProperty("adminName2")]
        public string AdminName2 { get; set; }

        [JsonProperty("lng")]
        public double Lng { get; set; }

        [JsonProperty("countryCode")]
        public string CountryCode { get; set; }

        [JsonProperty("postalCode")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long PostalCodePostalCode { get; set; }

        [JsonProperty("adminName1")]
        public string AdminName1 { get; set; }

        [JsonProperty("ISO3166-2")]
        public string Iso31662 { get; set; }

        [JsonProperty("placeName")]
        public string PlaceName { get; set; }

        [JsonProperty("lat")]
        public double Lat { get; set; }
    }

    public partial class Postal
    {
        public static Postal FromJson(string json) => JsonConvert.DeserializeObject<Postal>(json, PostalCodesJSON.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Postal self) => JsonConvert.SerializeObject(self, PostalCodesJSON.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
