// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using RecallJson;
//
//    var myRecalls = MyRecalls.FromJson(jsonString);

namespace RecallJson
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class MyRecalls
    {
        [JsonProperty("meta")]
        public Meta Meta { get; set; }

        [JsonProperty("results")]
        public List<Result> Results { get; set; }
    }

    public partial class Meta
    {
        [JsonProperty("disclaimer")]
        public string Disclaimer { get; set; }

        [JsonProperty("terms")]
        public Uri Terms { get; set; }

        [JsonProperty("license")]
        public Uri License { get; set; }

        [JsonProperty("last_updated")]
        public DateTimeOffset LastUpdated { get; set; }

        [JsonProperty("results")]
        public Results Results { get; set; }
    }

    public partial class Results
    {
        [JsonProperty("skip")]
        public long Skip { get; set; }

        [JsonProperty("limit")]
        public long Limit { get; set; }

        [JsonProperty("total")]
        public long Total { get; set; }
    }

    public partial class Result
    {
        [JsonProperty("country")]
        public string Country { get; set; }

        [JsonProperty("city")]
        public string City { get; set; }

        [JsonProperty("reason_for_recall")]
        public string ReasonForRecall { get; set; }

        [JsonProperty("address_1")]
        public string Address1 { get; set; }

        [JsonProperty("address_2")]
        public string Address2 { get; set; }

        [JsonProperty("code_info")]
        public string CodeInfo { get; set; }

        [JsonProperty("product_quantity")]
        public string ProductQuantity { get; set; }

        [JsonProperty("center_classification_date")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long CenterClassificationDate { get; set; }

        [JsonProperty("distribution_pattern")]
        public string DistributionPattern { get; set; }

        [JsonProperty("state")]
        public string State { get; set; }

        [JsonProperty("product_description")]
        public string ProductDescription { get; set; }

        [JsonProperty("report_date")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ReportDate { get; set; }

        [JsonProperty("classification")]
        public string Classification { get; set; }

        [JsonProperty("openfda")]
        public Openfda Openfda { get; set; }

        [JsonProperty("recall_number")]
        public string RecallNumber { get; set; }

        [JsonProperty("recalling_firm")]
        public string RecallingFirm { get; set; }

        [JsonProperty("initial_firm_notification")]
        public string InitialFirmNotification { get; set; }

        [JsonProperty("event_id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EventId { get; set; }

        [JsonProperty("product_type")]
        public string ProductType { get; set; }

        [JsonProperty("recall_initiation_date")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RecallInitiationDate { get; set; }

        [JsonProperty("postal_code")]
        public string PostalCode { get; set; }

        [JsonProperty("voluntary_mandated")]
        public string VoluntaryMandated { get; set; }

        [JsonProperty("status")]
        public string Status { get; set; }

        [JsonProperty("more_code_info")]
        public object MoreCodeInfo { get; set; }
    }

    public partial class Openfda
    {
    }

    public partial class MyRecalls
    {
        public static MyRecalls FromJson(string json) => JsonConvert.DeserializeObject<MyRecalls>(json, RecallJson.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this MyRecalls self) => JsonConvert.SerializeObject(self, RecallJson.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
